{"ast":null,"code":"// Dummy data for testing the FoodHub app without backend\nconst dummyUsers = [{\n  id: 1,\n  name: 'John Customer',\n  email: 'customer@test.com',\n  phone: '123-456-7890',\n  role: 'customer'\n}, {\n  id: 2,\n  name: 'Pizza Palace Owner',\n  email: 'restaurant@test.com',\n  phone: '123-456-7891',\n  role: 'restaurant'\n}, {\n  id: 3,\n  name: 'Admin User',\n  email: 'admin@test.com',\n  phone: '123-456-7892',\n  role: 'admin'\n}];\nconst dummyRestaurants = [{\n  id: 1,\n  name: 'Pizza Palace',\n  ownerId: 2,\n  cuisine: 'Italian',\n  address: '123 Main St, City',\n  phone: '555-0123',\n  description: 'Authentic Italian pizza and pasta',\n  rating: 4.5,\n  status: 'active'\n}, {\n  id: 2,\n  name: 'Burger Barn',\n  ownerId: 2,\n  cuisine: 'American',\n  address: '456 Oak Ave, City',\n  phone: '555-0124',\n  description: 'Juicy burgers and crispy fries',\n  rating: 4.2,\n  status: 'active'\n}, {\n  id: 3,\n  name: 'Sushi Zen',\n  ownerId: 2,\n  cuisine: 'Japanese',\n  address: '789 Pine St, City',\n  phone: '555-0125',\n  description: 'Fresh sushi and Japanese cuisine',\n  rating: 4.8,\n  status: 'active'\n}];\nconst dummyMenuItems = [\n// Pizza Palace menu\n{\n  id: 1,\n  restaurantId: 1,\n  name: 'Margherita Pizza',\n  price: 12.99,\n  description: 'Fresh tomatoes, mozzarella, basil',\n  category: 'Pizza',\n  available: true\n}, {\n  id: 2,\n  restaurantId: 1,\n  name: 'Pepperoni Pizza',\n  price: 14.99,\n  description: 'Pepperoni, mozzarella, tomato sauce',\n  category: 'Pizza',\n  available: true\n}, {\n  id: 3,\n  restaurantId: 1,\n  name: 'Caesar Salad',\n  price: 8.99,\n  description: 'Romaine lettuce, croutons, parmesan',\n  category: 'Salad',\n  available: true\n},\n// Burger Barn menu\n{\n  id: 4,\n  restaurantId: 2,\n  name: 'Classic Burger',\n  price: 11.99,\n  description: 'Beef patty, lettuce, tomato, cheese',\n  category: 'Burger',\n  available: true\n}, {\n  id: 5,\n  restaurantId: 2,\n  name: 'Chicken Deluxe',\n  price: 13.99,\n  description: 'Grilled chicken, avocado, bacon',\n  category: 'Burger',\n  available: true\n}, {\n  id: 6,\n  restaurantId: 2,\n  name: 'Sweet Potato Fries',\n  price: 6.99,\n  description: 'Crispy sweet potato fries',\n  category: 'Sides',\n  available: true\n},\n// Sushi Zen menu\n{\n  id: 7,\n  restaurantId: 3,\n  name: 'California Roll',\n  price: 9.99,\n  description: 'Crab, avocado, cucumber',\n  category: 'Sushi',\n  available: true\n}, {\n  id: 8,\n  restaurantId: 3,\n  name: 'Salmon Nigiri',\n  price: 15.99,\n  description: 'Fresh salmon over rice (6 pieces)',\n  category: 'Sushi',\n  available: true\n}, {\n  id: 9,\n  restaurantId: 3,\n  name: 'Miso Soup',\n  price: 4.99,\n  description: 'Traditional soybean soup',\n  category: 'Soup',\n  available: true\n}];\nconst dummyOrders = [{\n  id: 1,\n  customerId: 1,\n  restaurantId: 1,\n  items: [{\n    menuItem: dummyMenuItems[0],\n    quantity: 2\n  }, {\n    menuItem: dummyMenuItems[2],\n    quantity: 1\n  }],\n  total: 34.97,\n  status: 'delivered',\n  createdAt: '2025-09-28T18:30:00Z',\n  address: '123 Customer St, City'\n}, {\n  id: 2,\n  customerId: 1,\n  restaurantId: 2,\n  items: [{\n    menuItem: dummyMenuItems[3],\n    quantity: 1\n  }, {\n    menuItem: dummyMenuItems[5],\n    quantity: 1\n  }],\n  total: 18.98,\n  status: 'pending',\n  createdAt: '2025-10-01T12:15:00Z',\n  address: '123 Customer St, City'\n}];\n\n// Mock API functions that simulate server responses\nconst mockDelay = (ms = 500) => new Promise(resolve => setTimeout(resolve, ms));\nexport const userAPI = {\n  login: async email => {\n    await mockDelay();\n    const user = dummyUsers.find(u => u.email === email);\n    if (user) {\n      return {\n        data: user\n      };\n    }\n    throw new Error('User not found');\n  },\n  register: async userData => {\n    await mockDelay();\n    const existingUser = dummyUsers.find(u => u.email === userData.email);\n    if (existingUser) {\n      throw new Error('Email already exists');\n    }\n    const newUser = {\n      ...userData,\n      id: dummyUsers.length + 1\n    };\n    dummyUsers.push(newUser);\n    return {\n      data: newUser\n    };\n  },\n  getAllUsers: async () => {\n    await mockDelay();\n    return {\n      data: dummyUsers\n    };\n  },\n  getUserById: async id => {\n    await mockDelay();\n    const user = dummyUsers.find(u => u.id === parseInt(id));\n    return {\n      data: user\n    };\n  },\n  updateUser: async (id, userData) => {\n    await mockDelay();\n    const index = dummyUsers.findIndex(u => u.id === parseInt(id));\n    if (index !== -1) {\n      dummyUsers[index] = {\n        ...dummyUsers[index],\n        ...userData\n      };\n      return {\n        data: dummyUsers[index]\n      };\n    }\n    throw new Error('User not found');\n  },\n  deleteUser: async id => {\n    await mockDelay();\n    const index = dummyUsers.findIndex(u => u.id === parseInt(id));\n    if (index !== -1) {\n      dummyUsers.splice(index, 1);\n      return {\n        data: {\n          message: 'User deleted successfully'\n        }\n      };\n    }\n    throw new Error('User not found');\n  }\n};\nexport const restaurantAPI = {\n  getAllRestaurants: async () => {\n    await mockDelay();\n    return {\n      data: dummyRestaurants\n    };\n  },\n  getRestaurantById: async id => {\n    await mockDelay();\n    const restaurant = dummyRestaurants.find(r => r.id === parseInt(id));\n    return {\n      data: restaurant\n    };\n  },\n  createRestaurant: async restaurantData => {\n    await mockDelay();\n    const newRestaurant = {\n      ...restaurantData,\n      id: dummyRestaurants.length + 1\n    };\n    dummyRestaurants.push(newRestaurant);\n    return {\n      data: newRestaurant\n    };\n  },\n  updateRestaurant: async (id, restaurantData) => {\n    await mockDelay();\n    const index = dummyRestaurants.findIndex(r => r.id === parseInt(id));\n    if (index !== -1) {\n      dummyRestaurants[index] = {\n        ...dummyRestaurants[index],\n        ...restaurantData\n      };\n      return {\n        data: dummyRestaurants[index]\n      };\n    }\n    throw new Error('Restaurant not found');\n  },\n  getRestaurantsByOwner: async ownerId => {\n    await mockDelay();\n    const restaurants = dummyRestaurants.filter(r => r.ownerId === parseInt(ownerId));\n    return {\n      data: restaurants\n    };\n  },\n  toggleRestaurantStatus: async id => {\n    await mockDelay();\n    const index = dummyRestaurants.findIndex(r => r.id === parseInt(id));\n    if (index !== -1) {\n      dummyRestaurants[index].status = dummyRestaurants[index].status === 'active' ? 'inactive' : 'active';\n      return {\n        data: dummyRestaurants[index]\n      };\n    }\n    throw new Error('Restaurant not found');\n  }\n};\nexport const menuAPI = {\n  getAllMenuItems: async () => {\n    await mockDelay();\n    return {\n      data: dummyMenuItems\n    };\n  },\n  getMenuItemsByRestaurant: async restaurantId => {\n    await mockDelay();\n    const items = dummyMenuItems.filter(item => item.restaurantId === parseInt(restaurantId));\n    return {\n      data: items\n    };\n  },\n  createMenuItem: async menuItemData => {\n    await mockDelay();\n    const newItem = {\n      ...menuItemData,\n      id: dummyMenuItems.length + 1\n    };\n    dummyMenuItems.push(newItem);\n    return {\n      data: newItem\n    };\n  },\n  updateMenuItem: async (id, menuItemData) => {\n    await mockDelay();\n    const index = dummyMenuItems.findIndex(item => item.id === parseInt(id));\n    if (index !== -1) {\n      dummyMenuItems[index] = {\n        ...dummyMenuItems[index],\n        ...menuItemData\n      };\n      return {\n        data: dummyMenuItems[index]\n      };\n    }\n    throw new Error('Menu item not found');\n  },\n  deleteMenuItem: async id => {\n    await mockDelay();\n    const index = dummyMenuItems.findIndex(item => item.id === parseInt(id));\n    if (index !== -1) {\n      dummyMenuItems.splice(index, 1);\n      return {\n        data: {\n          message: 'Menu item deleted successfully'\n        }\n      };\n    }\n    throw new Error('Menu item not found');\n  },\n  toggleMenuItemAvailability: async id => {\n    await mockDelay();\n    const index = dummyMenuItems.findIndex(item => item.id === parseInt(id));\n    if (index !== -1) {\n      dummyMenuItems[index].available = !dummyMenuItems[index].available;\n      return {\n        data: dummyMenuItems[index]\n      };\n    }\n    throw new Error('Menu item not found');\n  }\n};\nexport const orderAPI = {\n  getAllOrders: async () => {\n    await mockDelay();\n    return {\n      data: dummyOrders\n    };\n  },\n  createOrder: async orderData => {\n    await mockDelay();\n    const newOrder = {\n      ...orderData,\n      id: dummyOrders.length + 1,\n      createdAt: new Date().toISOString(),\n      status: 'pending'\n    };\n    dummyOrders.push(newOrder);\n    return {\n      data: newOrder\n    };\n  },\n  getOrderById: async id => {\n    await mockDelay();\n    const order = dummyOrders.find(o => o.id === parseInt(id));\n    return {\n      data: order\n    };\n  },\n  getOrdersByCustomer: async customerId => {\n    await mockDelay();\n    const orders = dummyOrders.filter(o => o.customerId === parseInt(customerId));\n    return {\n      data: orders\n    };\n  },\n  getOrdersByRestaurant: async restaurantId => {\n    await mockDelay();\n    const orders = dummyOrders.filter(o => o.restaurantId === parseInt(restaurantId));\n    return {\n      data: orders\n    };\n  },\n  updateOrderStatus: async (id, status) => {\n    await mockDelay();\n    const index = dummyOrders.findIndex(o => o.id === parseInt(id));\n    if (index !== -1) {\n      dummyOrders[index].status = status;\n      return {\n        data: dummyOrders[index]\n      };\n    }\n    throw new Error('Order not found');\n  }\n};\nexport default {\n  userAPI,\n  restaurantAPI,\n  menuAPI,\n  orderAPI\n};","map":{"version":3,"names":["dummyUsers","id","name","email","phone","role","dummyRestaurants","ownerId","cuisine","address","description","rating","status","dummyMenuItems","restaurantId","price","category","available","dummyOrders","customerId","items","menuItem","quantity","total","createdAt","mockDelay","ms","Promise","resolve","setTimeout","userAPI","login","user","find","u","data","Error","register","userData","existingUser","newUser","length","push","getAllUsers","getUserById","parseInt","updateUser","index","findIndex","deleteUser","splice","message","restaurantAPI","getAllRestaurants","getRestaurantById","restaurant","r","createRestaurant","restaurantData","newRestaurant","updateRestaurant","getRestaurantsByOwner","restaurants","filter","toggleRestaurantStatus","menuAPI","getAllMenuItems","getMenuItemsByRestaurant","item","createMenuItem","menuItemData","newItem","updateMenuItem","deleteMenuItem","toggleMenuItemAvailability","orderAPI","getAllOrders","createOrder","orderData","newOrder","Date","toISOString","getOrderById","order","o","getOrdersByCustomer","orders","getOrdersByRestaurant","updateOrderStatus"],"sources":["E:/7th Smester/Topics in DS/App/ReactMeals/src/services/dummyApi.js"],"sourcesContent":["// Dummy data for testing the FoodHub app without backend\r\nconst dummyUsers = [\r\n  { id: 1, name: 'John Customer', email: 'customer@test.com', phone: '123-456-7890', role: 'customer' },\r\n  { id: 2, name: 'Pizza Palace Owner', email: 'restaurant@test.com', phone: '123-456-7891', role: 'restaurant' },\r\n  { id: 3, name: 'Admin User', email: 'admin@test.com', phone: '123-456-7892', role: 'admin' },\r\n];\r\n\r\nconst dummyRestaurants = [\r\n  {\r\n    id: 1,\r\n    name: 'Pizza Palace',\r\n    ownerId: 2,\r\n    cuisine: 'Italian',\r\n    address: '123 Main St, City',\r\n    phone: '555-0123',\r\n    description: 'Authentic Italian pizza and pasta',\r\n    rating: 4.5,\r\n    status: 'active'\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Burger Barn',\r\n    ownerId: 2,\r\n    cuisine: 'American',\r\n    address: '456 Oak Ave, City',\r\n    phone: '555-0124',\r\n    description: 'Juicy burgers and crispy fries',\r\n    rating: 4.2,\r\n    status: 'active'\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Sushi Zen',\r\n    ownerId: 2,\r\n    cuisine: 'Japanese',\r\n    address: '789 Pine St, City',\r\n    phone: '555-0125',\r\n    description: 'Fresh sushi and Japanese cuisine',\r\n    rating: 4.8,\r\n    status: 'active'\r\n  }\r\n];\r\n\r\nconst dummyMenuItems = [\r\n  // Pizza Palace menu\r\n  { id: 1, restaurantId: 1, name: 'Margherita Pizza', price: 12.99, description: 'Fresh tomatoes, mozzarella, basil', category: 'Pizza', available: true },\r\n  { id: 2, restaurantId: 1, name: 'Pepperoni Pizza', price: 14.99, description: 'Pepperoni, mozzarella, tomato sauce', category: 'Pizza', available: true },\r\n  { id: 3, restaurantId: 1, name: 'Caesar Salad', price: 8.99, description: 'Romaine lettuce, croutons, parmesan', category: 'Salad', available: true },\r\n  \r\n  // Burger Barn menu\r\n  { id: 4, restaurantId: 2, name: 'Classic Burger', price: 11.99, description: 'Beef patty, lettuce, tomato, cheese', category: 'Burger', available: true },\r\n  { id: 5, restaurantId: 2, name: 'Chicken Deluxe', price: 13.99, description: 'Grilled chicken, avocado, bacon', category: 'Burger', available: true },\r\n  { id: 6, restaurantId: 2, name: 'Sweet Potato Fries', price: 6.99, description: 'Crispy sweet potato fries', category: 'Sides', available: true },\r\n  \r\n  // Sushi Zen menu\r\n  { id: 7, restaurantId: 3, name: 'California Roll', price: 9.99, description: 'Crab, avocado, cucumber', category: 'Sushi', available: true },\r\n  { id: 8, restaurantId: 3, name: 'Salmon Nigiri', price: 15.99, description: 'Fresh salmon over rice (6 pieces)', category: 'Sushi', available: true },\r\n  { id: 9, restaurantId: 3, name: 'Miso Soup', price: 4.99, description: 'Traditional soybean soup', category: 'Soup', available: true }\r\n];\r\n\r\nconst dummyOrders = [\r\n  {\r\n    id: 1,\r\n    customerId: 1,\r\n    restaurantId: 1,\r\n    items: [\r\n      { menuItem: dummyMenuItems[0], quantity: 2 },\r\n      { menuItem: dummyMenuItems[2], quantity: 1 }\r\n    ],\r\n    total: 34.97,\r\n    status: 'delivered',\r\n    createdAt: '2025-09-28T18:30:00Z',\r\n    address: '123 Customer St, City'\r\n  },\r\n  {\r\n    id: 2,\r\n    customerId: 1,\r\n    restaurantId: 2,\r\n    items: [\r\n      { menuItem: dummyMenuItems[3], quantity: 1 },\r\n      { menuItem: dummyMenuItems[5], quantity: 1 }\r\n    ],\r\n    total: 18.98,\r\n    status: 'pending',\r\n    createdAt: '2025-10-01T12:15:00Z',\r\n    address: '123 Customer St, City'\r\n  }\r\n];\r\n\r\n// Mock API functions that simulate server responses\r\nconst mockDelay = (ms = 500) => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\nexport const userAPI = {\r\n  login: async (email) => {\r\n    await mockDelay();\r\n    const user = dummyUsers.find(u => u.email === email);\r\n    if (user) {\r\n      return { data: user };\r\n    }\r\n    throw new Error('User not found');\r\n  },\r\n  \r\n  register: async (userData) => {\r\n    await mockDelay();\r\n    const existingUser = dummyUsers.find(u => u.email === userData.email);\r\n    if (existingUser) {\r\n      throw new Error('Email already exists');\r\n    }\r\n    const newUser = { ...userData, id: dummyUsers.length + 1 };\r\n    dummyUsers.push(newUser);\r\n    return { data: newUser };\r\n  },\r\n  \r\n  getAllUsers: async () => {\r\n    await mockDelay();\r\n    return { data: dummyUsers };\r\n  },\r\n  \r\n  getUserById: async (id) => {\r\n    await mockDelay();\r\n    const user = dummyUsers.find(u => u.id === parseInt(id));\r\n    return { data: user };\r\n  },\r\n  \r\n  updateUser: async (id, userData) => {\r\n    await mockDelay();\r\n    const index = dummyUsers.findIndex(u => u.id === parseInt(id));\r\n    if (index !== -1) {\r\n      dummyUsers[index] = { ...dummyUsers[index], ...userData };\r\n      return { data: dummyUsers[index] };\r\n    }\r\n    throw new Error('User not found');\r\n  },\r\n  \r\n  deleteUser: async (id) => {\r\n    await mockDelay();\r\n    const index = dummyUsers.findIndex(u => u.id === parseInt(id));\r\n    if (index !== -1) {\r\n      dummyUsers.splice(index, 1);\r\n      return { data: { message: 'User deleted successfully' } };\r\n    }\r\n    throw new Error('User not found');\r\n  }\r\n};\r\n\r\nexport const restaurantAPI = {\r\n  getAllRestaurants: async () => {\r\n    await mockDelay();\r\n    return { data: dummyRestaurants };\r\n  },\r\n  \r\n  getRestaurantById: async (id) => {\r\n    await mockDelay();\r\n    const restaurant = dummyRestaurants.find(r => r.id === parseInt(id));\r\n    return { data: restaurant };\r\n  },\r\n  \r\n  createRestaurant: async (restaurantData) => {\r\n    await mockDelay();\r\n    const newRestaurant = { ...restaurantData, id: dummyRestaurants.length + 1 };\r\n    dummyRestaurants.push(newRestaurant);\r\n    return { data: newRestaurant };\r\n  },\r\n  \r\n  updateRestaurant: async (id, restaurantData) => {\r\n    await mockDelay();\r\n    const index = dummyRestaurants.findIndex(r => r.id === parseInt(id));\r\n    if (index !== -1) {\r\n      dummyRestaurants[index] = { ...dummyRestaurants[index], ...restaurantData };\r\n      return { data: dummyRestaurants[index] };\r\n    }\r\n    throw new Error('Restaurant not found');\r\n  },\r\n  \r\n  getRestaurantsByOwner: async (ownerId) => {\r\n    await mockDelay();\r\n    const restaurants = dummyRestaurants.filter(r => r.ownerId === parseInt(ownerId));\r\n    return { data: restaurants };\r\n  },\r\n  \r\n  toggleRestaurantStatus: async (id) => {\r\n    await mockDelay();\r\n    const index = dummyRestaurants.findIndex(r => r.id === parseInt(id));\r\n    if (index !== -1) {\r\n      dummyRestaurants[index].status = dummyRestaurants[index].status === 'active' ? 'inactive' : 'active';\r\n      return { data: dummyRestaurants[index] };\r\n    }\r\n    throw new Error('Restaurant not found');\r\n  }\r\n};\r\n\r\nexport const menuAPI = {\r\n  getAllMenuItems: async () => {\r\n    await mockDelay();\r\n    return { data: dummyMenuItems };\r\n  },\r\n  \r\n  getMenuItemsByRestaurant: async (restaurantId) => {\r\n    await mockDelay();\r\n    const items = dummyMenuItems.filter(item => item.restaurantId === parseInt(restaurantId));\r\n    return { data: items };\r\n  },\r\n  \r\n  createMenuItem: async (menuItemData) => {\r\n    await mockDelay();\r\n    const newItem = { ...menuItemData, id: dummyMenuItems.length + 1 };\r\n    dummyMenuItems.push(newItem);\r\n    return { data: newItem };\r\n  },\r\n  \r\n  updateMenuItem: async (id, menuItemData) => {\r\n    await mockDelay();\r\n    const index = dummyMenuItems.findIndex(item => item.id === parseInt(id));\r\n    if (index !== -1) {\r\n      dummyMenuItems[index] = { ...dummyMenuItems[index], ...menuItemData };\r\n      return { data: dummyMenuItems[index] };\r\n    }\r\n    throw new Error('Menu item not found');\r\n  },\r\n  \r\n  deleteMenuItem: async (id) => {\r\n    await mockDelay();\r\n    const index = dummyMenuItems.findIndex(item => item.id === parseInt(id));\r\n    if (index !== -1) {\r\n      dummyMenuItems.splice(index, 1);\r\n      return { data: { message: 'Menu item deleted successfully' } };\r\n    }\r\n    throw new Error('Menu item not found');\r\n  },\r\n  \r\n  toggleMenuItemAvailability: async (id) => {\r\n    await mockDelay();\r\n    const index = dummyMenuItems.findIndex(item => item.id === parseInt(id));\r\n    if (index !== -1) {\r\n      dummyMenuItems[index].available = !dummyMenuItems[index].available;\r\n      return { data: dummyMenuItems[index] };\r\n    }\r\n    throw new Error('Menu item not found');\r\n  }\r\n};\r\n\r\nexport const orderAPI = {\r\n  getAllOrders: async () => {\r\n    await mockDelay();\r\n    return { data: dummyOrders };\r\n  },\r\n  \r\n  createOrder: async (orderData) => {\r\n    await mockDelay();\r\n    const newOrder = { \r\n      ...orderData, \r\n      id: dummyOrders.length + 1,\r\n      createdAt: new Date().toISOString(),\r\n      status: 'pending'\r\n    };\r\n    dummyOrders.push(newOrder);\r\n    return { data: newOrder };\r\n  },\r\n  \r\n  getOrderById: async (id) => {\r\n    await mockDelay();\r\n    const order = dummyOrders.find(o => o.id === parseInt(id));\r\n    return { data: order };\r\n  },\r\n  \r\n  getOrdersByCustomer: async (customerId) => {\r\n    await mockDelay();\r\n    const orders = dummyOrders.filter(o => o.customerId === parseInt(customerId));\r\n    return { data: orders };\r\n  },\r\n  \r\n  getOrdersByRestaurant: async (restaurantId) => {\r\n    await mockDelay();\r\n    const orders = dummyOrders.filter(o => o.restaurantId === parseInt(restaurantId));\r\n    return { data: orders };\r\n  },\r\n  \r\n  updateOrderStatus: async (id, status) => {\r\n    await mockDelay();\r\n    const index = dummyOrders.findIndex(o => o.id === parseInt(id));\r\n    if (index !== -1) {\r\n      dummyOrders[index].status = status;\r\n      return { data: dummyOrders[index] };\r\n    }\r\n    throw new Error('Order not found');\r\n  }\r\n};\r\n\r\nexport default {\r\n  userAPI,\r\n  restaurantAPI,\r\n  menuAPI,\r\n  orderAPI\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}